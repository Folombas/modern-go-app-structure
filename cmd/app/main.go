package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	"github.com/Folombas/modern-go-app-structure/internal/greeter"
	"github.com/joho/godotenv"
)

var startTime = time.Now()

func init() {
	log.Println("üõ† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
}

func main() {
	// 0. –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è .env file not found, using defaults")
	}

	// 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	portStr := os.Getenv("APP_PORT")
	if portStr == "" {
		portStr = "8080" // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
	port, err := strconv.Atoi(portStr)
	if err != nil {
		log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	env := os.Getenv("APP_ENV")
	if env == "" {
		env = "development" // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	log.SetPrefix("[APP] ")
	log.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)
	log.Printf("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ '%s' –Ω–∞ –ø–æ—Ä—Ç—É %d...", env, port)

	// 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞ greeter
	message, err := greeter.SayHello("–ì–æ—à–∞")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ greeter: %v", err)
	}
	fmt.Println(message)

	// 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	mux := http.NewServeMux()
	
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, `
<!DOCTYPE html>
<html>
<head>
	<title>Modern Go App</title>
	<style>
		body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
		h1 { color: #2c3e50; }
		.info { background: #f8f9fa; padding: 20px; border-radius: 10px; display: inline-block; }
		.env-badge { 
			background-color: %s; 
			color: white; 
			padding: 2px 10px; 
			border-radius: 10px; 
			font-size: 0.8em;
		}
	</style>
</head>
<body>
	<h1>–ü—Ä–∏–≤–µ—Ç –æ—Ç Go! üöÄ</h1>
	<div class="info">
		<p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: <strong>%s</strong></p>
		<p>–û–∫—Ä—É–∂–µ–Ω–∏–µ: <span class="env-badge">%s</span></p>
		<p>–ü–æ—Ä—Ç: <strong>%d</strong></p>
		<p>–í–µ—Ä—Å–∏—è: <strong>%s</strong></p>
	</div>
</body>
</html>
		`, getEnvColor(env), time.Since(startTime).Round(time.Second), env, port, getVersion())
	})

	mux.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{
			"status": "ok", 
			"timestamp": "%s",
			"version": "%s",
			"uptime": "%s"
		}`, time.Now().Format(time.RFC3339), getVersion(), time.Since(startTime).Round(time.Second))
	})

	// 5. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	server := &http.Server{
		Addr:         fmt.Sprintf(":%d", port),
		Handler:      mux,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	go func() {
		log.Printf("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %d", port)
		log.Printf("üëâ –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:%d", port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, syscall.SIGINT, syscall.SIGTERM)
	<-stop

	log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
	
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: %v", err)
	}
	
	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
func getEnvColor(env string) string {
	switch env {
	case "production":
		return "#e74c3c" // –ö—Ä–∞—Å–Ω—ã–π
	case "staging":
		return "#f39c12" // –û—Ä–∞–Ω–∂–µ–≤—ã–π
	default:
		return "#2ecc71" // –ó–µ–ª–µ–Ω—ã–π
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func getVersion() string {
	version := os.Getenv("APP_VERSION")
	if version == "" {
		return "1.0.0-dev"
	}
	return version
}