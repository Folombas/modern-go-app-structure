package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"sync"
	"syscall"
	"time"

	"github.com/Folombas/modern-go-app-structure/internal/greeter"
	"github.com/gorilla/websocket"
	"github.com/joho/godotenv"
)

var (
	startTime      = time.Now()
	clients        = make(map[*websocket.Conn]bool)
	clientsMutex   sync.Mutex
	upgrader       = websocket.Upgrader{
		ReadBufferSize:  1024,
		WriteBufferSize: 1024,
		CheckOrigin: func(r *http.Request) bool {
			return true // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
		},
	}
)

func init() {
	log.Println("üõ† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
}

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è .env file not found, using defaults")
	}

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	port, _ := strconv.Atoi(os.Getenv("APP_PORT"))
	if port == 0 {
		port = 8080
	}
	env := os.Getenv("APP_ENV")
	if env == "" {
		env = "development"
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	log.SetPrefix("[APP] ")
	log.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)
	log.Printf("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ '%s' –Ω–∞ –ø–æ—Ä—Ç—É %d...", env, port)

	// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ greeter
	message, err := greeter.SayHello("–ì–æ—à–∞")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ greeter: %v", err)
	}
	fmt.Println(message)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	mux := http.NewServeMux()
	
	// –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		html := fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
	<title>Modern Go App</title>
	<meta charset="UTF-8">
	<style>
		body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
		h1 { color: #2c3e50; }
		.info { background: #f8f9fa; padding: 20px; border-radius: 10px; display: inline-block; }
		.env-badge { 
			background-color: %s; 
			color: white; 
			padding: 2px 10px; 
			border-radius: 10px; 
			font-size: 0.8em;
		}
		#uptime { 
			font-weight: bold;
			color: #2c3e50;
			font-size: 1.2em;
		}
	</style>
	<script>
		const ws = new WebSocket("ws://" + window.location.host + "/ws");
		
		ws.onmessage = function(event) {
			const data = JSON.parse(event.data);
			if (data.uptime) {
				document.getElementById('uptime').textContent = data.uptime;
			}
		};
		
		ws.onerror = function(error) {
			console.error("WebSocket Error:", error);
		};
	</script>
</head>
<body>
	<h1>–ü—Ä–∏–≤–µ—Ç –æ—Ç Go! üöÄ</h1>
	<div class="info">
		<p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: <span id="uptime">%s</span></p>
		<p>–û–∫—Ä—É–∂–µ–Ω–∏–µ: <span class="env-badge">%s</span></p>
		<p>–ü–æ—Ä—Ç: <strong>%d</strong></p>
		<p>–í–µ—Ä—Å–∏—è: <strong>%s</strong></p>
		<p><small>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞</small></p>
	</div>
</body>
</html>
		`, getEnvColor(env), formatDuration(time.Since(startTime)), env, port, getVersion())
		
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		w.Write([]byte(html))
	})

	// Health-check
	mux.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{
			"status": "ok", 
			"timestamp": "%s",
			"version": "%s",
			"uptime": "%s"
		}`, time.Now().Format(time.RFC3339), getVersion(), formatDuration(time.Since(startTime)))
	})

	// WebSocket endpoint
	mux.HandleFunc("/ws", handleWebSocket)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	server := &http.Server{
		Addr:         fmt.Sprintf(":%d", port),
		Handler:      mux,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	// –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
	go broadcastUptime()

	go func() {
		log.Printf("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %d", port)
		log.Printf("üëâ –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:%d", port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, syscall.SIGINT, syscall.SIGTERM)
	<-stop

	log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
	
	// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: %v", err)
	}
	
	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func handleWebSocket(w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("WebSocket upgrade error: %v", err)
		return
	}
	defer conn.Close()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	clientsMutex.Lock()
	clients[conn] = true
	clientsMutex.Unlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	conn.WriteJSON(map[string]string{
		"uptime": formatDuration(time.Since(startTime)),
	})

	// –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
	for {
		_, _, err := conn.ReadMessage()
		if err != nil {
			break
		}
	}
	
	// –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
	clientsMutex.Lock()
	delete(clients, conn)
	clientsMutex.Unlock()
}

// –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
func broadcastUptime() {
	ticker := time.NewTicker(time.Second)
	defer ticker.Stop()
	
	for range ticker.C {
		uptime := formatDuration(time.Since(startTime))
		
		clientsMutex.Lock()
		for client := range clients {
			err := client.WriteJSON(map[string]string{
				"uptime": uptime,
			})
			if err != nil {
				log.Printf("WebSocket write error: %v", err)
				client.Close()
				delete(clients, client)
			}
		}
		clientsMutex.Unlock()
	}
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ß–ß:–ú–ú:–°–°
func formatDuration(d time.Duration) string {
	total := int(d.Seconds())
	hours := total / 3600
	minutes := (total % 3600) / 60
	seconds := total % 60
	return fmt.Sprintf("%02d:%02d:%02d", hours, minutes, seconds)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (getEnvColor, getVersion –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)